From e87ecb6452f343ed48c485f6b40f4b8d763e08a5 Mon Sep 17 00:00:00 2001
From: jitwxs <jitwxs@foxmail.com>
Date: Fri, 27 Oct 2017 16:31:24 +0800
Subject: [PATCH 4/5] syscall/_exit: add _exit04 to test _exit(2)

Signed-off-by: jitwxs <jitwxs@foxmail.com>
---
 testcases/kernel/syscalls/_exit/_exit04.c | 76 +++++++++++++++++++++++++++++++
 1 file changed, 76 insertions(+)
 create mode 100644 testcases/kernel/syscalls/_exit/_exit04.c

diff --git a/testcases/kernel/syscalls/_exit/_exit04.c b/testcases/kernel/syscalls/_exit/_exit04.c
new file mode 100644
index 0000000..025c632
--- /dev/null
+++ b/testcases/kernel/syscalls/_exit/_exit04.c
@@ -0,0 +1,76 @@
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it would be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write the Free Software Foundation, Inc.
+ */
+/**********************************************************
+ *
+ *    TEST IDENTIFIER   : exit04
+ *
+ *    TEST TITLE        : Basic tests for _exit(2)
+ *
+ *    TEST CASE TOTAL   : 1
+ *
+ *    AUTHOR            : jitwxs
+ *						<jitwxs@foxmail.com>
+ *
+ *    DESCRIPTION
+ *      This is a Phase I test for the _exit(2) system call.
+ *      It is intended to provide a limited exposure of the system call.
+ *
+ **********************************************************/
+
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <signal.h>
+#include "tst_test.h"
+
+static struct tcase {
+	const int input;
+	const int output;
+} tcases[] = {
+	{0, 0},
+	{10, 10},
+	{128, 128},
+	{256, 0},
+	{288, 32}
+};
+
+static void my_test(unsigned int n)
+{
+	struct tcase *tc = &tcases[n];
+	pid_t pid;
+	int status;
+
+	if (!SAFE_FORK()) {
+		pid = SAFE_FORK();
+		if (pid == 0)
+			_exit(tc->input);
+		else {
+			SAFE_WAITPID(pid, &status, 0);
+			if (WEXITSTATUS(status) != tc->output)
+				tst_res(TFAIL | TERRNO, "_exit() Failed!");
+			else
+				tst_res(TPASS, "_exit() Success!");
+			TST_CHECKPOINT_WAKE(0);
+			_exit(0);
+		}
+	} else {
+		TST_CHECKPOINT_WAIT(0);
+	}
+}
+
+static struct tst_test test = {
+	.tcnt = ARRAY_SIZE(tcases),
+	.test = my_test,
+	.forks_child = 1,
+	.needs_checkpoints = 1
+};
-- 
1.8.3.1

