From 5cc7e9a4e5360e3de3672634f386f59cf3e6bcc4 Mon Sep 17 00:00:00 2001
From: jitwxs <jitwxs@foxmail.com>
Date: Sun, 26 Nov 2017 16:28:44 +0800
Subject: [PATCH 3/4] Convert epoll_pwait01 to new API

Signed-off-by: jitwxs <jitwxs@foxmail.com>
---
 .../kernel/syscalls/epoll_pwait/epoll_pwait01.c    | 226 ++++++++-------------
 1 file changed, 81 insertions(+), 145 deletions(-)

diff --git a/testcases/kernel/syscalls/epoll_pwait/epoll_pwait01.c b/testcases/kernel/syscalls/epoll_pwait/epoll_pwait01.c
index ed05da8..f28df07 100644
--- a/testcases/kernel/syscalls/epoll_pwait/epoll_pwait01.c
+++ b/testcases/kernel/syscalls/epoll_pwait/epoll_pwait01.c
@@ -1,197 +1,133 @@
 /*
- * Copyright (c) 2016 Fujitsu Ltd.
- * Author: Guangwen Feng <fenggw-fnst@cn.fujitsu.com>
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
  *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
+ * This program is distributed in the hope that it would be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
- * the GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.
- */
-
-/*
- * Description:
- *  Basic test for epoll_pwait(2).
- *  1) epoll_pwait(2) with sigmask argument allows the caller to
- *     safely wait until either a file descriptor becomes ready
- *     or the timeout expires.
- *  2) epoll_pwait(2) with NULL sigmask argument fails if
- *     interrupted by a signal handler, epoll_pwait(2) should
- *     return -1 and set errno to EINTR.
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write the Free Software Foundation, Inc.
  */
+/**********************************************************
+ *
+ *    TEST IDENTIFIER   : epoll_pwait01
+ *
+ *    TEST TITLE        : Basic tests for epoll_wait(2)
+ *
+ *    TEST CASE TOTAL   : 1
+ *
+ *    AUTHOR            : jitwxs
+ *						<jitwxs@foxmail.com>
+ *
+ *    Description:
+ *		Basic test for epoll_pwait(2).
+ *		1)  epoll_pwait(2) with sigmask argument allows the caller to
+ *			safely wait until either a file descriptor becomes ready
+ *			or the timeout expires.
+ *		2)  epoll_pwait(2) with NULL sigmask argument fails if
+ *			interrupted by a signal handler, epoll_pwait(2) should
+ *			return -1 and set errno to EINTR.include <sys/epoll.h>
+ **********************************************************/
 
 #include <sys/epoll.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <stdlib.h>
 #include <string.h>
 #include <errno.h>
 
-#include "test.h"
-#include "epoll_pwait.h"
-#include "safe_macros.h"
-
-char *TCID = "epoll_pwait01";
-int TST_TOTAL = 2;
+#include "tst_test.h"
 
 static int epfd, fds[2];
-static sigset_t signalset;
-static struct epoll_event epevs;
 static struct sigaction sa;
+static struct epoll_event epevs;
+static sigset_t signalset;
 
-static void setup(void);
-static void verify_sigmask(void);
-static void verify_nonsigmask(void);
-static void sighandler(int sig LTP_ATTRIBUTE_UNUSED);
-static void do_test(sigset_t *);
-static void do_child(void);
-static void cleanup(void);
+static struct tcase {
+	sigset_t *sig;
+	int ret_val;
+	int exp_errno;
+} tcases[] = {
+	{&signalset, 0, 0},
+	{NULL, -1, EINTR}
+};
 
-int main(int ac, char **av)
+static void sighandler(int sig LTP_ATTRIBUTE_UNUSED)
 {
-	int lc;
-
-	tst_parse_opts(ac, av, NULL, NULL);
-
-	setup();
-
-	for (lc = 0; TEST_LOOPING(lc); lc++) {
-		tst_count = 0;
-
-		do_test(&signalset);
-		do_test(NULL);
-	}
-
-	cleanup();
-	tst_exit();
 }
 
 static void setup(void)
 {
-	if ((tst_kvercmp(2, 6, 19)) < 0) {
-		tst_brkm(TCONF, NULL, "This test can only run on kernels "
-			 "that are 2.6.19 or higher");
-	}
-
-	tst_sig(FORK, DEF_HANDLER, cleanup);
-
-	TEST_PAUSE;
-
 	if (sigemptyset(&signalset) == -1)
-		tst_brkm(TFAIL | TERRNO, NULL, "sigemptyset() failed");
+		tst_brk(TFAIL | TERRNO, "sigemptyset() failed");
 
 	if (sigaddset(&signalset, SIGUSR1) == -1)
-		tst_brkm(TFAIL | TERRNO, NULL, "sigaddset() failed");
+		tst_brk(TFAIL | TERRNO, "sigaddset() failed");
 
 	sa.sa_flags = 0;
 	sa.sa_handler = sighandler;
 	if (sigemptyset(&sa.sa_mask) == -1)
-		tst_brkm(TFAIL | TERRNO, NULL, "sigemptyset() failed");
+		tst_brk(TFAIL | TERRNO, "sigemptyset() failed");
 
 	if (sigaction(SIGUSR1, &sa, NULL) == -1)
-		tst_brkm(TFAIL | TERRNO, NULL, "sigaction() failed");
+		tst_brk(TFAIL | TERRNO, "sigaction() failed");
 
-	SAFE_PIPE(NULL, fds);
+	SAFE_PIPE(fds);
 
 	epfd = epoll_create(1);
-	if (epfd == -1) {
-		tst_brkm(TBROK | TERRNO, cleanup,
-			 "failed to create epoll instance");
-	}
+	if (epfd == -1)
+		tst_brk(TBROK | TERRNO, "failed to create epoll instance");
 
 	epevs.events = EPOLLIN;
 	epevs.data.fd = fds[0];
 
-	if (epoll_ctl(epfd, EPOLL_CTL_ADD, fds[0], &epevs) == -1) {
-		tst_brkm(TBROK | TERRNO, cleanup,
-			 "failed to register epoll target");
-	}
+	if (epoll_ctl(epfd, EPOLL_CTL_ADD, fds[0], &epevs) == -1)
+		tst_brk(TBROK | TERRNO, "failed to register epoll target");
 }
 
-static void verify_sigmask(void)
-{
-	if (TEST_RETURN == -1) {
-		tst_resm(TFAIL | TTERRNO, "epoll_pwait() failed");
-		return;
-	}
-
-	if (TEST_RETURN != 0) {
-		tst_resm(TFAIL, "epoll_pwait() returned %li, expected 0",
-			 TEST_RETURN);
-		return;
-	}
-
-	tst_resm(TPASS, "epoll_pwait(sigmask) blocked signal");
-}
-
-static void verify_nonsigmask(void)
+static void cleanup(void)
 {
-	if (TEST_RETURN != -1) {
-		tst_resm(TFAIL, "epoll_wait() succeeded unexpectedly");
-		return;
-	}
-
-	if (TEST_ERRNO == EINTR) {
-		tst_resm(TPASS | TTERRNO, "epoll_wait() failed as expected");
-	} else {
-		tst_resm(TFAIL | TTERRNO, "epoll_wait() failed unexpectedly, "
-				 "expected EINTR");
-	}
-}
+	if (epfd > 0 && close(epfd))
+		tst_res(TWARN | TERRNO, "failed to close epfd");
 
-static void sighandler(int sig LTP_ATTRIBUTE_UNUSED)
-{
+	if (close(fds[0]))
+		tst_res(TWARN | TERRNO, "close(fds[0]) failed");
 
+	if (close(fds[1]))
+		tst_res(TWARN | TERRNO, "close(fds[1]) failed");
 }
 
-static void do_test(sigset_t *sigmask)
+static void my_test(unsigned int n)
 {
-	pid_t cpid;
-
-	cpid = tst_fork();
-	if (cpid < 0)
-		tst_brkm(TBROK | TERRNO, cleanup, "fork() failed");
+	struct tcase *tc = &tcases[n];
 
-	if (cpid == 0)
-		do_child();
+	if (SAFE_FORK() == 0) {
+		TST_PROCESS_STATE_WAIT(getppid(), 'S');
+		SAFE_KILL(getppid(), SIGUSR1);
 
-	TEST(epoll_pwait(epfd, &epevs, 1, 100, sigmask));
-
-	if (sigmask != NULL)
-		verify_sigmask();
-	else
-		verify_nonsigmask();
-
-	tst_record_childstatus(cleanup, cpid);
-}
-
-static void do_child(void)
-{
-	if (tst_process_state_wait2(getppid(), 'S') != 0) {
-		tst_brkm(TBROK | TERRNO, cleanup,
-			 "failed to wait for parent process's state");
+		cleanup();
+		exit(EXIT_SUCCESS);
 	}
 
-	SAFE_KILL(cleanup, getppid(), SIGUSR1);
-
-	cleanup();
-	tst_exit();
-}
-
-static void cleanup(void)
-{
-	if (epfd > 0 && close(epfd))
-		tst_resm(TWARN | TERRNO, "failed to close epfd");
+	TEST(epoll_pwait(epfd, &epevs, 1, 100, tc->sig));
 
-	if (close(fds[0]))
-		tst_resm(TWARN | TERRNO, "close(fds[0]) failed");
+	if (tc->ret_val == TEST_RETURN)
+		if (TEST_RETURN == 0 || tc->exp_errno == TEST_ERRNO) {
+			tst_res(TPASS, "epoll_pwait() pass");
+			return;
+		}
 
-	if (close(fds[1]))
-		tst_resm(TWARN | TERRNO, "close(fds[1]) failed");
+	tst_res(TFAIL | TTERRNO, "epoll_pwait() failed");
 }
+
+static struct tst_test test = {
+	.tcnt = ARRAY_SIZE(tcases),
+	.test = my_test,
+	.needs_checkpoints = 1,
+	.forks_child = 1,
+	.setup = setup,
+	.cleanup = cleanup,
+	.min_kver = "2.6.19"
+};
-- 
1.9.1

