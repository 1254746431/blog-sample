From 804dff0faff6dccb50eb680e69b030849aeac6b1 Mon Sep 17 00:00:00 2001
From: jitwxs <jitwxs@foxmail.com>
Date: Mon, 9 Oct 2017 14:08:06 +0800
Subject: [PATCH 3/4] kernel/syscalls/unlink: Convert to new API to test
 unlink(1)

Signed-off-by: jitwxs <jitwxs@foxmail.com>
---
 testcases/kernel/syscalls/unlink/unlink05.c | 206 ++++------------------------
 1 file changed, 28 insertions(+), 178 deletions(-)

diff --git a/testcases/kernel/syscalls/unlink/unlink05.c b/testcases/kernel/syscalls/unlink/unlink05.c
index aa49316..e7206ca 100644
--- a/testcases/kernel/syscalls/unlink/unlink05.c
+++ b/testcases/kernel/syscalls/unlink/unlink05.c
@@ -1,6 +1,4 @@
 /*
- * Copyright (c) 2000 Silicon Graphics, Inc.  All Rights Reserved.
- *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of version 2 of the GNU General Public License as
  * published by the Free Software Foundation.
@@ -9,201 +7,53 @@
  * WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  *
- * Further, this software is distributed without any warranty that it is
- * free of the rightful claim of any third person regarding infringement
- * or the like.  Any license provided herein, whether implied or
- * otherwise, applies only to this software file.  Patent licenses, if
- * any, provided herein do not apply to combinations of this program with
- * other software, or any other product whatsoever.
- *
  * You should have received a copy of the GNU General Public License along
  * with this program; if not, write the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Contact information: Silicon Graphics, Inc., 1600 Amphitheatre Pkwy,
- * Mountain View, CA  94043, or:
- *
- * http://www.sgi.com
- *
- * For further information regarding this notice, see:
- *
- * http://oss.sgi.com/projects/GenInfo/NoticeExplan/
  *
  */
-/* $Id: unlink05.c,v 1.6 2009/11/02 13:57:19 subrata_modak Exp $ */
 /**********************************************************
  *
- *    OS Test - Silicon Graphics, Inc.
- *
- *    TEST IDENTIFIER	: unlink05
- *
- *    EXECUTED BY	: anyone
- *
- *    TEST TITLE	: Basic test for unlink(2)
- *
- *    PARENT DOCUMENT	: usctpl01
- *
- *    TEST CASE TOTAL	: 1
- *
- *    WALL CLOCK TIME	: 1
- *
- *    CPU TYPES		: ALL
- *
- *    AUTHOR		: William Roske
- *
- *    CO-PILOT		: Dave Fenner
- *
- *    DATE STARTED	: 03/30/92
- *
- *    INITIAL RELEASE	: UNICOS 7.0
- *
- *    TEST CASES
- *
- * 	1.) unlink(2) returns...(See Description)
- *
- *    INPUT SPECIFICATIONS
- * 	The standard options for system call tests are accepted.
- *	(See the parse_opts(3) man page).
- *
- *    OUTPUT SPECIFICATIONS
- *$
- *    DURATION
- * 	Terminates - with frequency and infinite modes.
- *
- *    SIGNALS
- * 	Uses SIGUSR1 to pause before test if option set.
- * 	(See the parse_opts(3) man page).
- *
- *    RESOURCES
- * 	None
- *
- *    ENVIRONMENTAL NEEDS
- *      No run-time environmental needs.
+ *    TEST IDENTIFIER   : unlink05
  *
- *    SPECIAL PROCEDURAL REQUIREMENTS
- * 	None
+ *    TEST TITLE        : Basic tests for unlink(1)
  *
- *    INTERCASE DEPENDENCIES
- * 	None
+ *    TEST CASE TOTAL   : 1
  *
- *    DETAILED DESCRIPTION
- *	This is a Phase I test for the unlink(2) system call.  It is intended
- *	to provide a limited exposure of the system call, for now.  It
- *	should/will be extended when full functional tests are written for
- *	unlink(2).
+ *    AUTHOR            : jitwxs
+ *						  <jitwxs@foxmail.com>
  *
- * 	Setup:
- * 	  Setup signal handling.
- *	  Pause for SIGUSR1 if option specified.
+ *    DESCRIPTION
+ *      This is a Phase I test for the unlink(1) system call.
+ *      It is intended to provide a limited exposure of the system call.
  *
- * 	Test:
- *	 Loop if the proper options are given.
- * 	  Execute system call
- *	  Check return code, if system call failed (return=-1)
- *		Log the errno and Issue a FAIL message.
- *	  Otherwise, Issue a PASS message.
- *
- * 	Cleanup:
- * 	  Print errno log and/or timing stats if options given
- *
- *
- *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#**/
+ **********************************************************/
 
-#include <sys/types.h>
-#include <fcntl.h>
 #include <errno.h>
 #include <string.h>
-#include <signal.h>
-#include "test.h"
+#include <sys/mount.h>
+#include "tst_test.h"
 
-void setup();
-void cleanup();
-void create_file();
+#define TMPFILE "tmpfile"
 
-char *TCID = "unlink05";
-int TST_TOTAL = 1;
-
-char fname[255];
-int fd;
-
-int main(int ac, char **av)
+static void testUnlink(void)
 {
-	int lc;
-
-    /***************************************************************
-     * parse standard options
-     ***************************************************************/
-	tst_parse_opts(ac, av, NULL, NULL);
-
-    /***************************************************************
-     * perform global setup for test
-     ***************************************************************/
-	setup();
-
-    /***************************************************************
-     * check looping state if -c option given
-     ***************************************************************/
-	for (lc = 0; TEST_LOOPING(lc); lc++) {
-
-		tst_count = 0;
-
-		/*
-		 *  Call unlink(2)
-		 */
-		TEST(unlink(fname));
-
-		/* check return code */
-		if (TEST_RETURN == -1) {
-			tst_resm(TFAIL, "unlink(%s) Failed, errno=%d : %s",
-				 fname, TEST_ERRNO, strerror(TEST_ERRNO));
-		} else {
-			tst_resm(TPASS, "unlink(%s) returned %ld",
-				 fname, TEST_RETURN);
-			/* recreate file for next loop */
-			create_file();
-		}
-	}
-
-	cleanup();
-	tst_exit();
+	TEST(unlink(TMPFILE));
+
+	if (TEST_RETURN == -1 || access(TMPFILE, F_OK) == 0)
+		tst_res(TFAIL | TTERRNO, "unlink(%s) Failed, errno=%d : %s",
+				TMPFILE, TEST_ERRNO, strerror(TEST_ERRNO));
+	else
+		tst_res(TPASS, "unlink(%s) returned %ld",
+				TMPFILE, TEST_RETURN);
 }
 
-/***************************************************************
- * setup() - performs all ONE TIME setup for this test.
- ***************************************************************/
-void setup(void)
+static void setup(void)
 {
-
-	tst_sig(NOFORK, DEF_HANDLER, cleanup);
-
-	TEST_PAUSE;
-
-	tst_tmpdir();
-
-	create_file();
+	SAFE_TOUCH(TMPFILE, 0777, NULL);
 }
 
-/***************************************************************
- * cleanup() - performs all ONE TIME cleanup for this test at
- *		completion or premature exit.
- ***************************************************************/
-void cleanup(void)
-{
-
-	tst_rmdir();
-
-}
-
-void create_file(void)
-{
-	sprintf(fname, "tfile_%d", getpid());
-	if ((fd = open(fname, O_RDWR | O_CREAT, 0700)) == -1) {
-		tst_brkm(TBROK, cleanup,
-			 "open(%s, O_RDWR|O_CREAT,0700) Failed, errno=%d : %s",
-			 fname, errno, strerror(errno));
-	}
-	if (close(fd) == -1) {
-		tst_resm(TWARN, "close(%s) Failed, errno=%d : %s",
-			 fname, errno, strerror(errno));
-	}
-}
+static struct tst_test test = {
+	.needs_tmpdir = 1,
+	.setup = setup,
+	.test_all = testUnlink
+};
-- 
1.8.3.1

